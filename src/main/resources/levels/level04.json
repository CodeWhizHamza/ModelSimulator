{"filename":"level04.json","name":"XOR","inputs":{"A":[0,0,1,1],"B":[0,1,0,1]},"outputs":{"C":[0,1,1,0]},"availableGates":{"NOT":["A\u003d!B"],"OR":["C\u003dA|B"],"AND":["C\u003dA\u0026B"]},"maxGates":5,"maxTime":45,"previousScore":3,"isLocked":false,"hint":"2 NOTs, 2 ANDs, and 1 NOT","description":"The XOR (exclusive OR) gate can be constructed using an OR gate, an AND gate, and a NOT gate. The inputs to the XOR gate are connected to the inputs of both the OR and the AND gate. The output of the OR gate is connected to one input of the AND gate, while the inputs to the NOT gate are connected to the inputs of the AND gate and the output of the OR gate. The output of the NOT gate is connected to the other input of the AND gate.\n\nThe XOR gate produces an output that is HIGH (1) only if the two inputs are different. If the inputs are the same, the output of the XOR gate is LOW (0).\n\nThe behavior of the XOR gate can be thought of as a \"switching\" behavior. If one input is HIGH and the other input is LOW, then the output will be HIGH. However, if both inputs are either HIGH or LOW, then the output will be LOW. The XOR gate is commonly used in digital logic circuits for operations such as binary addition, data encryption, and error detection."}